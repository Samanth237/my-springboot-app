pipeline {
    agent any

    environment {
        IMAGE_NAME = "samanth237/my-springboot-app"
        CONTAINER_NAME = "springboot-app"
        EC2_USER = "ec2-user"  // Use "ubuntu" if using Ubuntu instance
        EC2_HOST = "13.201.103.187"  // Replace with EC2 public IP
        SSH_KEY = "/Users/samanthgoud/Downloads/sshdemo/demo.pem"
    }

    stages {

        stage('Cleanup Workspace') {
            steps {
                sh 'rm -rf $(ls -A | grep -v ".git")'  // Deletes files but keeps .git
            }
        }

        stage('Check Git in Jenkins') {
            steps {
                sh 'which git'
                sh 'git --version'
            }
        }

        stage('Clone Repository') {
            steps {
                script {
                    // Ensure we're inside the workspace directory
                    sh 'cd $WORKSPACE && pwd'
                }
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/master']],
                    userRemoteConfigs: [[url: 'https://github.com/Samanth237/my-springboot-app.git']]
                ])
                sh 'cd $WORKSPACE && git status' // Debugging to confirm git works
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t $IMAGE_NAME ."
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withDockerRegistry([credentialsId: 'docker-hub-credentials', url: 'https://index.docker.io/v1/']) {
                        sh "docker push $IMAGE_NAME"
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    sh """
                        chmod 400 $SSH_KEY
                        ssh -o StrictHostKeyChecking=no -i $SSH_KEY $EC2_USER@$EC2_HOST "docker pull $IMAGE_NAME"
                        ssh -o StrictHostKeyChecking=no -i $SSH_KEY $EC2_USER@$EC2_HOST "docker stop $CONTAINER_NAME || true"
                        ssh -o StrictHostKeyChecking=no -i $SSH_KEY $EC2_USER@$EC2_HOST "docker rm $CONTAINER_NAME || true"
                        ssh -o StrictHostKeyChecking=no -i $SSH_KEY $EC2_USER@$EC2_HOST "docker run -d --name $CONTAINER_NAME -p 8080:8080 $IMAGE_NAME"
                    """
                }
            }
        }
    }
}
