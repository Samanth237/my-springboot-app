pipeline {
    agent any

    environment {
        IMAGE_NAME = "samanth237/my-springboot-app"
        CONTAINER_NAME = "springboot-app"
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],  // ✅ Use '*/main' for better compatibility
                    extensions: [[$class: 'WipeWorkspace']],  // ✅ Clears old Git data
                    userRemoteConfigs: [[
                        url: 'https://github.com/Samanth237/my-springboot-app.git'
                    ]]
                ])
            }
        }


        stage('Set Permissions') {
            steps {
                sh 'chmod +x gradlew'
            }
        }

        stage('Stop Gradle Daemons') {
            steps {
                sh './gradlew --stop || true'
            }
        }


        stage('Build Jar') {
            steps {
                sh './gradlew clean build --no-daemon --stacktrace'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $IMAGE_NAME .'
            }
        }

        stage('Push to DockerHub') {
            steps {
                withDockerRegistry([credentialsId: 'dockerhub-credentials', url: '']) {
                    sh 'docker push $IMAGE_NAME'
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                sshagent(['ec2-ssh-credentials']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no ec2-user@13.201.103.187 <<EOF
                        docker stop $CONTAINER_NAME || true
                        docker rm $CONTAINER_NAME || true
                        docker pull $IMAGE_NAME
                        docker run -d -p 8081:8080 --name $CONTAINER_NAME $IMAGE_NAME
                    EOF
                    '''
                }
            }
        }
    }
}
