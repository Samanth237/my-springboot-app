pipeline {
    agent any

    environment {
        IMAGE_NAME = "samanth237/my-springboot-app"
        CONTAINER_NAME = "springboot-app"
        EC2_USER = "ec2-user"  // Change to "ubuntu" if using Ubuntu instance
        EC2_HOST = "13.201.103.187"  // Replace with your EC2 public IP
        SSH_KEY = "/var/jenkins_home/demo.pem"  // Change to the mounted path inside the container
    }

    stages {
        
        stage('Cleanup Workspace') {
            steps {
                script {
                    echo "Cleaning workspace..."
                    sh "rm -rf $WORKSPACE/*"
                    sh "ls -la $WORKSPACE"
                }
            }
        }

        stage('Check Git in Jenkins') {
            steps {
                script {
                    echo "Checking Git installation..."
                    sh "which git"
                    sh "git --version"
                }
            }
        }

        stage('Clone Repository') {
            steps {
                script {
                    echo "Cloning repository..."
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/master']],
                        userRemoteConfigs: [[url: 'https://github.com/Samanth237/my-springboot-app.git']],
                        extensions: [[$class: 'CleanBeforeCheckout']]
                    ])
                    sh "ls -la $WORKSPACE"
                    sh "cd $WORKSPACE && git status"
                    sh "cd $WORKSPACE && git remote -v"
                }
            }
        }

        stage('Build JAR') {
            steps {
                script {
                    echo "Granting execute permission to Gradle wrapper..."
                    sh 'chmod +x ./gradlew'  // ✅ FIX: Make gradlew executable
        
                    echo "Building Spring Boot JAR..."
                    sh './gradlew clean bootJar'
        
                    echo "Listing generated JAR file..."
                    sh 'ls -la build/libs/'  // Debugging: Ensure JAR is created
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker Image..."

                    // Ensure JAR file exists
                    sh """
                        if [ ! -f build/libs/app.jar ]; then
                            echo "❌ JAR file not found in build/libs/"
                            exit 1
                        fi
                    """

                    // Build Docker Image
                    sh "docker build --platform linux/amd64 -t $IMAGE_NAME -f Dockerfile ."
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    echo "Pushing Docker image to Docker Hub..."
                    withDockerRegistry([credentialsId: 'docker-hub-credentials', url: 'https://index.docker.io/v1/']) {
                        sh "docker push $IMAGE_NAME"
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    echo "Deploying to EC2..."
                    sh """
                        chmod 400 $SSH_KEY
                        ssh -o StrictHostKeyChecking=no -i $SSH_KEY $EC2_USER@$EC2_HOST "docker pull $IMAGE_NAME"
                        ssh -o StrictHostKeyChecking=no -i $SSH_KEY $EC2_USER@$EC2_HOST "docker stop $CONTAINER_NAME || true"
                        ssh -o StrictHostKeyChecking=no -i $SSH_KEY $EC2_USER@$EC2_HOST "docker rm -f $CONTAINER_NAME || true"
                        ssh -o StrictHostKeyChecking=no -i $SSH_KEY $EC2_USER@$EC2_HOST "docker run -d --name $CONTAINER_NAME -p 8081:8080 $IMAGE_NAME"
                    """
                }
            }
        }
    }
}
